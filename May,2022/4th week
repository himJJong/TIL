Toss slash 2021
Test code 효율성과 중요성
쿠버네티스, db 스케일 아웃, ORM
POD - 파드(Pod) 는 쿠버네티스에서 생성하고 관리할 수 있는 배포 가능한 가장 작은 컴퓨팅 단위
RDBMS와 Scale out -> 관계 데이 베이스의 확장
싱글톤 패턴 - 어플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당(Static)그 메모리에 인스턴스를 만들어 사용하는 디자인 패턴.

MySQL, Postgres, Oracle등의 기존 RDBMS에서는 세 가지 Scale out 방법이 있다

- Replication(복제)
    - Master Node와 Slave Node를 따로 두어서, Master Node에 CUD 작업의 책임을 주고, Slave Node에 Read의 책임을 주는 것
    - Master → Slave의 방향으로 데이터가 전파됨
    - 상대적으로 다중화가 쉬운 Slave에 부하 분산이 목적
    - Single Master와 Multi Master Replication으로 나뉘어짐
    - Master 혹은 Slave 전체가 죽으면 제대로 동작하지 않음
- Clustering
    - 여러 DB Node를 두어 모든 노드가 전체 데이터를 저장하는 전략
    - 고가용성 시스템에 적절하고, 한 노드가 죽더라도 다른 노드에 저장된 데이터들이 온전히 존재함
    - 데이터 동기화에 추가적인 시간이 걸림 - Consistency(일관성), Latency(지연시간) 관련 문제 존재
    - 모든 노드가 전체 데이터를 가지고 있어 스토리지 차원에서 비효율적
- Sharding (하나의 거대한 데이터베이스나 네트워크 시스템을 여러 개의 작은 조각으로 나누어 분산 저장하여 관리하는 것)
    - 테이블의 데이터를 Hash 혹은 Range로 나누어서 Shard별로 Row들을 분산해서 저장하는 전략
    - 스토리지 차원에서 효율적
    - 특히 Row가 많을 경우 부하 분산에 효율적
    - MySQL 기준, **Shard간의 Cross Join이 불가**

실제로 올려본 경험은 없는 이유? 필요성을 못 느끼고 우리가 아는 DB에서 세팅이 어려워서..

- 필요성은 부하 테스트를 통해 만들 수 있음
- 세팅은 자체적으로 분산 시스템 구조를 적용하고 있는 RDBMS를 쓰면 쉬움
- MySQL, Postgres, Oracle은 Scale out의 필요성이 없었던 옛날에서는 최고였음
    - 그러나 Scale out을 통해 아키텍처가 분산화되는 현재는 놓아줘야 할 때
- DB 인스턴스를 꼭 하나만 둬야 할 이유는 없음. 
DB 인스턴스(가상 장비와 설치된 Microsoft SQL Server를 아우르는 개념으로, RDS for MS-SQL에서 제공하는 Microsoft SQL Server의 단위)
- DB를 꼭 위 셋중에 하나만 써야 할 이유도 없음

=================================================================================================

웹서버 vs WAS

웹 서버 - 클라이언트가 웹 브라우저에서 어떠한 페이지 요청으 하면 웹 서버에서 그 요청을 받아 정적 컨텐츠를 제공하는 서버.
정적 컨텐츠마 제공하는 것은 아니고 웹서벅 동적 컨텐으를 요청 받으면 WAS에게 해다 요청을 넘겨주고, WAS에서 처리하 결과르 클라이언트에 전달해주는 역할도 함.
ex) Apache

WAS - 웹 서버와 웹 컨테이너가 합쳐진 형태로, 웹 서버 단독으로는 처리할 수 없는 데이터베이스의 조회와 다양한 로직 처리가 필요한 동적컨텐츠 제공.
WAS느 JSP, Servlet 구동 환경을 제공해주기 때문에 웹 컨테인 혹은 서블릿 컨테이너라고도 불림.
웹 컨테이너 - 웹 서버가 보낸 JSP,PHP등 파일을 수행한 결과르 다시 웹서버로 보내주는 역할을 함
ex) Tomcat


OLTP vs OLAP

- Online Transaction Processing(OLTP)
    - WAS와 연동되는 비교적 소규모 데이터베이스에서 데이터 CRUD에 사용되는 쿼리
    - 트랜잭션이므로 ACID 요소가 중요시됨(트랜잭션 - 데이터베이스의 상태를 변경시키기 위해 수행하는 작업 단위)
    - 빠른 조회 등의 지연시간 처리 중요함
    - 다운타임 없이 트랜잭션 처리와 데이터 무결성에 안정적이어야 함
- Online Analytical Processing(OLAP)
    - 데이터 웨어하우스등 큰 규모의 데이터베이스에서 데이터 분석에 사용되는 쿼리
    - 레이턴시는 상대적으로 중요하지 않음
Refactoring - 공학에서 '결과의 변경 없이 코드의 구조를 재조정함'을 뜻한다. 주로 가독성을 높이고 유지보수를 편하게 한다
=================================================================================================
OAuth(Open Authentification)2.0 - 웹, 앱 서비스에서 제한적으로 권한을 요청해 사용할 수 있는 키를 발급해주는 것
인증뿐만 아니라 사용자의 권한에 따라 접근할 수 있는 데이터가 드라도록 설정할 수 있는 “범용 프레임워크”이다.

Amazon Elastic Container Registry(Amazon ECR)는 안전하고 확장 가능하고 신뢰할 수 있는 AWS 관리형 컨테이너 이미지 레지스트리 서비스입니다. 
Amazon ECR은 AWS IAM을 사용하여 리소스 기반 권한을 가진 프라이빗 리포지토리를 지원합니다. 따라서 지정된 사용자 또는 Amazon 
EC2 인스턴스가 컨테이너 리포지토리 및 이미지에 액세스할 수 있습니다. 원하는 CLI를 사용하여 도커 이미지,
Open Container Initiative(OCI) 이미지 및 OCI 호환 아티팩트를 푸시, 풀 및 관리할 수 있습니다.

Amazon Elastic Kubernetes Service(Amazon EKS)는 Kubernetes를 실행하는 데 사용할 수 있는 관리형 서비스입니다. 
AWS Kubernetes 제어 플레인 또는 노드를 설치, 작동 및 유지 관리할 필요가 없습니다. Kubernetes는 컨테이너화된 애플리케이션의 배포, 
조정 및 관리 자동화를 위한 오픈 소스 시스템입니다. 

Amazon Elastic Compute Cloud(Amazon EC2)는 안전하고 크기 조정이 가능한 컴퓨팅 용량을 클라우드에서 제공하는 웹 서비스입니다.
AMI (Amazon Machine Images)는 EC2 인스턴스를 시작하는 데 필요한 정보가 들어있는 이미지 즉 EC2의 복사본 이라고 생각하시면 됩니다.

==================================================================================================

Test code Tip

1. given, when, then
2. 모든 response에 대한 테스트를 진행한다.
3. First 
Fast - 단위 테스트는 가능한 빠르게 실행되어야 한다. 
Independent - 단위 테스트는 객체의 상태, 메소드, 이전 테스트 상태, 다른 메소드의 결과등에 의존해서는 안된다. 어떠한 순서 상관 없이 성공해야함
Repeatable - 반복 가능해야한다. DB에 의존하는 테스트는 수행 후 자동으로 롤백을 한다는 등의 별도 설정이 필요하다.
Self-validating - 단위테스트는 자체 검증이 가능해야한다. 테스트를 개발자가 직접 수동으로 확인할 필요 없이 ,Assert문 등에 의해 성공여부가 결과로 나와야한다.
Timely - 단위테스트를 통과하는 제품코드가 작성되기 바로전에 단위 테스트를 작성해야한다. TDD를 하고 있다면 적용이 되지만 그렇지 않을 수도 있다.

TDD - 테스트가 주도하는 개발 - 실패하는 테스트코드 작성 -> 테스트가 성공하는 프로덕션코드 작성 -> 테스트가 성공하면 프로덕션 코드를 리팩토링 하는식으로 개발방법
====================================================================================================================
Java Algorithm

<int vs Integer>

int(primitive type)
-int는 변수의 타입
변수(variable)는 값을 저장할 수 있는 메모리 상의 공간, int 와 char가 변수의 형을 지정해주고 있는 것이 변수의 타입.
자료형은 'data의 type에 따라 값이 저장될 공간의 크기와 저장 형식을 정의한 것
산술 연산 가능, null로 초기화 불가

Integer(wrapper class)
기본형을 객체로 다루기 위해 사용하는 클래스들을 래퍼 클래스 ex) Integer는 int의 레퍼클레스
Unboxing하지 않을 시 산술 연산 불가능, null값 처리 가능

<StringBuilder>
String을 +연산으로 붙이지 말고 StringBuilder를 이용하면 수행시간을 더 줄일 수 있다.

<문자를 정수로>
문자 1 = 아스키코드(49)
문자 2 = 아스키코드(50)
문자 3 = 아스키코드(51)

so 여기에 '0'을 빼주면 정수로 변환
ex) charAt(i)-'0'

<StringBuilder>

sb.append(값)
- StringBuffer, StringBuilder 뒤에 값을 붙인다
 
sb.insert(인덱스, 값)
- 특정 인덱스부터 값을 삽입한다
 
sb.delete(인덱스, 인덱스)
- 특정 인덱스부터 인덱스까지 값을 삭제한다
 
sb.indexOf(값)
- 값이 어느 인덱스에 들어있는지 확인한다
 
sb.substring(인덱스, 인덱스)
- 인덱스부터 인덱스까지 값을 잘라온다
 
sb.length()
- 길이 확인
 
sb.replace(인덱스, 인덱스, 값)
- 인덱스부터 인덱스까지 값으로 변경
 
sb.reverse()
- 글자 순서를 뒤집는다
 
이제 간단히 정리해 보자면
 
<String에서 concat, + 사용 시 속도가 왜 느려지나>
=> String은 불변(immutable)하기 때문에 concat, + 사용 시 기존 값을 버리고 새로 할당해서 1000번 이상 수행할 경우 급격히 느려짐
 
<StringBuffer, StringBuilder를 사용하는 이유> 
=> String에서 concat, +를 천번 이상 사용할 경우 속도가 급격히 느려지기 때문에 해당 상황에는
변하는(mutable) StringBuffer와 StringBuilder를 사용한다
 
<StringBuffer, StringBuilder의 차이> 
=> StringBuffer는 공통 메소드 동기화로 인해 멀티 스레드 환경에서만 사용 그 외에는 StringBuilder를 사용하면 됨

====================================================
토큰 관련 참고 글 : https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=jmjm223&logNo=221483149513

슬라이스(Slice) 테스트
-슬라이스(Slice) 테스트를 한다는 건 특정 Layer를 타켓으로 테스트를 한다는 뜻이다.ex) Controller Layer, Service Layer

==========================================================================================================

Amazon ECR - 컨테이너 이미지를 압축하고 암호화하여 어디서든 빠르게 시작하고 사용할 수 있게 함.

Amazon ECS - 완전 관리형 컨테이너 오케스트레이션 서비스로 컨테이너화 된 애플리케이션을 실행하는 가장 안전하고 신뢰성과 확장성이 높은 솔루션
(오케스트레이션) -> 오케스트레이션은 컴퓨터 시스템과 애플리케이션, 서비스의 자동화된 설정, 관리, 조정을 의미

Amazon EKS - 완전관리형 Kubernetes 서비스로, Kubernetes를 사용하여 컨테이너화된 애플리케이션을 실행하는 가장 안전하고 
             신뢰성과 확장성이 뛰어난 솔루션을 제공합니다.

Amazon Fargate
AWS Fargate는 컨테이너에 적합한 서버리스 컴퓨팅 엔진으로, Amazon Elastic Container Service(ECS) 
및 Amazon Elastic Kubernetes Service(EKS)와 연동됩니다. Fargate에서는 서버를 프로비저닝하고 관리할 필요가 없으므로, 
애플리케이션별로 리소스를 지정하고 관련 비용을 지불할 수 있으며, 애플리케이션을 격리하도록 설계되었기 때문에 보안 성능을 향상시킬 수 있습니다.
(프로비저닝) - 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 필요 시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것

Amazon EC2 - EC2 가상 머신을 사용하면 서버 클러스터를 제어하고 다양한 사용자 지정 옵션을 적용할 수 있습니다.




<Route 53>

Amazon Route 53는 높은 가용성과 확장성이 뛰어난 클라우드 Domain Name System (DNS) 웹 서비스입니다. 이 서비스는 최종 사용자를 인터넷 애플리케이션으로 라우팅할 수 있는 
매우 안정적이고 비용 효율적인 방법을 개발자와 기업에 제공하기 위해 설계되었습니다. 이 서비스에서는 www.example.com과 같은 이름을 192.0.2.1과 같은 컴퓨터 간 연결에 사용되는 
숫자 IP 주소로 변환합니다. 또한, Amazon Route 53는 IPv6와 완벽히 호환됩니다.

Amazon Route 53는 사용자의 요청을 Amazon EC2 인스턴스, Elastic Load Balancing 로드 밸런서, Amazon S3 버킷 등 AWS에서 실행되는 인프라에 효과적으로 연결합니다. 
사용자를 AWS 외부의 인프라로 라우팅하는 데도 Route 53를 사용할 수 있습니다. Amazon Route 53를 사용하여 DNS 상태 확인을 구성한 다음 Route 53 애플리케이션 복구 컨트롤러를 사용하여 
장애를 복구하고 애플리케이션 복구를 제어하는 애플리케이션의 기능을 지속적으로 모니터링할 수 있습니다.

Amazon Route 53 트래픽 흐름을 사용하면 지연 시간 기반 라우팅, 지역 DNS, 지역 근접성, 가중치 기반 라운드 로빈을 비롯하여 다양한 라우팅 유형을 통해 전역적으로 트래픽을 관리할 수 있습니다.
지연 시간이 짧고 내결함성이 있는 다양한 아키텍처를 제공하기 위해 이러한 모든 라우팅 유형을 DNS 장애 조치와 결합할 수 있습니다.

<S3 bucket> 

객체 스토리지 서비스입니다. 고객은 규모와 업종에 관계없이 원히는 양의 데이터를 저장하고 보호하여 데이터 레이크, 클라우드 네이티브 애플리케이션 
및 모바일 앱과 같은 거의 모든 사용 사례를 지원할 수 있습니다. 비용 효율적인 스토리지 클래스와 사용이 쉬운 관리 기능을 통해 비용을 최적화하고, 데이터를 정리하고, 
세분화된 액세스 제어를 구성하여 특정 비즈니스, 조직 및 규정 준수 요구 사항을 충족할 수 있습니다.

<Redis>

애플리케이션 성능 가속화 - 초고속 애플리케이션 성능을 위해 마이크로초 단위의 대기 시간과 높은 처리랑을 기반으로 데이터에 액세스합니다.
간편한 백엔드 데이터베이스 로드 - 데이터를 캐싱하여 백엔드 데이터베이스에서 부담을 줄이면 애플리케이션 확장성을 개선하고 운영 부담을 줄일 수 있습니다.
낮은 대기 시간 데이터 스토어 구축 - ElastiCache를 사용하여 메모리에 내구성이 없는 데이터 집합을 저장하고 마이크로초 대기 시간으로 실시간 애플리케이션을 지원합니다.

<Elasticsearch> -참고자료: https://victorydntmd.tistory.com/308

Elasticsearch는 Apache Lucene( 아파치 루씬 ) 기반의 Java 오픈소스 분산 검색 엔진입니다.
Elasticsearch를 통해 루씬 라이브러리를 단독으로 사용할 수 있게 되었으며, 방대한 양의 데이터를 신속하게,
거의 실시간( NRT, Near Real Time )으로 저장, 검색, 분석할 수 있습니다.
검색을 위해 단독으로 사용되기도 하며, ELK( Elasticsearch / Logstatsh / Kibana )스택으로 사용되기도 합니다.
ELK 스택이란 다음과 같습니다.

1) Elasticsearch - 다양한 소스( DB, csv파일 등 )의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 Elasticsearch로 전달
2) Logstatsh - 다양한 소스( DB, csv파일 등 )의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 Elasticsearch로 전달
3) Kibana - Elasticsearch의 빠른 검색을 통해 데이터를 시각화 및 모니터링다양한 소스( DB, csv파일 등 )의 로그 또는 트랜잭션 데이터를 
수집, 집계, 파싱하여 Elasticsearch로 전달

그런데 Elasticsearch는 왜 빠를까요?? - 그 이유는 inverted index( 역색인 )에 있습니다.

먼저 index와 inverted index의 차이는 쉽게 말해서 책에서 맨 앞에 볼 수 있는 목차가 index이고,
책 맨 뒤에 키워드마다 찾아볼 수 있도록 찾아보기가 inverted index.
Elasticsearch는 텍스트를 파싱해서 검색어 사전을 만든 다음에 inverted index 방식으로 텍스트를 저장

===================================================================================================
