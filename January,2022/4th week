next.js - react의 SSR을 쉽게 구현할 수 있게 도와주는 프레임 워크
 
react - 데이터를 넣으면 우리가 지정한 유저 인터페이스를 조립해서 보여줍니다, 프론트 엔드 라이브러리
 
nginx , gunicorn
비동기 - 요청을 보냈을 때 응답과 상관없이 다음 동작 출력 가능
동기 - 요청을 보냈을때 응답이 와야 다음 동작이 출력 가능하다
 
 
프로토타입 
bootstrap - 프론트엔드의 프레임워크
was(web application server)
미들웨어 - 클라이언트와 DB사이에 또 다른 서버를 두는것
 
웹 서버 - 보통 정적인 컨텐츠를 브라우저에 전송하는 역할
WAS - 프로그램의 동적인 결과를 브라우저에 전송하는 역할
 
rabbit mq -> RabbitMQ는 AMQP를 따르는 오픈소스 메세지 브로커인데, 메세지를 많은 사용자에게 전달하거나, 
요청에 대한 처리 시간이 길 때, 해당 요청을 다른 API에게 위임하고 빠른 응답을 할 때 많이 사용합니다. 
또한, MQ를 사용하여 애플리케이션 간 결합도를 낮출 수 있는 장점도 있습니다.
 
SSR- > 전통적인 웹 어플리케이션 랜더링 방식
사용자가 웹페이지에 접근할 때 서버에 페이지에 대한 요청을 한다. 이때 서버에서는 html view와 같은 자원들을 어떻게 보여줄지 해석하고 랜더링 하여 사용자에게 반환한다.
 검색엔진 최적화 가능, 초기로딩 속도가 빠름
-> 서버에 부담, 프로젝트 구조가 복잡
 
SPA - 최초 한번 페이지 전체를 로딩한 이후 부터 데이터만 변경하여 사용하는 단일 페이지로 구성된 웹 애플리케이션이다.
화면 구성에 필요한 모든 HTML을 클라이언트가 갖고 있고 서버측에는 필요한 데이터를 요청하고 JSON으로 받기 때문에 기존의 어플리케이션에 비해 화면을 구성하는 속도가 빠르다.
 
CSR -> 서버에서 json파일을 보내는 역할만 하며, html을 그리는 역할은 클라이언트 측에서 javascript가 수행한다.
 
 
Rendering -> 서버로부터 html파일을 받아 브라우저 화면에 표시하고 그리는 작업
 
1)서버로부터 데이터 응답받아 html을 parsing하여 dom트리를 생성
2)dom트리가 구축되는 동안 브라우저는 render트리 구축
3)css설정 및 위치 설정
4)render트리가 그려지고 브라우저 화면에 표시
=====================================================================================================================================================
<Cloud>
쿠버네티스 - 컨테니어화된 애플리케이션의 자동 디플로이, 스케일링을 제공하는 관리 시스템
GCP
오토스케일링(Auto Scaling)은 클라우드의 유연성을 돋보이게 하는 핵심기술로 CPU, 메모리, 디스크, 네트워크 트래픽과 같은 시스템 자원들의 메트릭(Metric) 값을 모니터링하여 서버 사이즈를 자동으로 조절합니다
 
Amazon Elastic Compute Cloud(Amazon EC2)는 Amazon Web Services(AWS) 클라우드에서 확장 가능 컴퓨팅 용량을 제공합니다. Amazon EC2를 사용하면 하드웨어에 선투자할 필요가 없어 더 빠르게 애플리케이션을 개발하고 배포할 수 있습니다(lightsail보다 복잡한 규모)
 
Lightsail - 사용자 지정 코드 및 일반 CMS를 포함한 간단한 웹 애플리케이션 및 웹 사이트에 사용됩니다.(소규모)
gcp, big query
=============================================================================================================================================================
 
opencv - 실시간 컴퓨터 비전을 목적으로 한 프로그래밍 라이브러리(Ai)
yolo - 단일 단계 방식의 객체 탐지 알고리즘



