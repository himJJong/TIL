node.js
express
nodemon

<algorithm>
DFS/BFS
==============================================================================
DFS와 BFS의 시간복잡도

두 방식 모두 조건 내의 모든 노드를 검색한다는 점에서 시간 복잡도는 동일합니다.
DFS와 BFS 둘 다 다음 노드가 방문하였는지를 확인하는 시간과 각 노드를 방문하는 시간을 합하면 됩니다.

DFS, BFS은 특징에 따라 사용에 더 적합한 문제 유형들이 있습니다.
•  그래프의 모든 정점을 방문하는 것이 주요한 문제
단순히 모든 정점을 방문하는 것이 중요한 문제의 경우 DFS, BFS 두 가지 방법 중 어느 것을 사용하셔도 상관없습니다.
둘 중 편한 것을 사용하시면 됩니다.
•  경로의 특징을 저장해둬야 하는 문제
예를 들면 각 정점에 숫자가 적혀있고 a부터 b까지 가는 경로를 구하는데 경로에 같은 숫자가 있으면 안 된다는 문제 등, 각각의 경로마다 특징을 저장해둬야 할 때는 DFS를 사용합니다. (BFS는 경로의 특징을 가지지 X
•  최단거리 구해야 하는 문제
미로 찾기 등 최단거리를 구해야 할 경우, BFS가 유리
왜냐하면 깊이 우선 탐색으로 경로를 검색할 경우 처음으로 발견되는 해답이 최단거리가 아닐 수 있지만,
너비 우선 탐색으로 현재 노드에서 가까운 곳부터 찾기 때문에경로를 탐색 시 먼저 찾아지는 해답이 곧 최단거리기 때문입니다.


•  검색 대상 그래프가 정말 크다면 DFS를 고려
•  검색대상의 규모가 크지 않고, 검색 시작 지점으로부터 원하는 대상이 별로 멀지 않다면 BFS


DFS : 이동한 정점의 값을 가지고 계속 연산을 하는 경우(stack,재귀적으로 호출되는경우) 
BFS : 최단거리 문제(queue)
================================================================================
<백준 14503 로봇 청소기>

DFS, BFS 둘다 사용 가능
1)  판단  (DFS vs BFS)
2)  DFS  (스택 vs 재귀)
3)  고려조건
1. 왼쪽 방향부터 확인
2. 벽을 뚫고 나아갈 수 없으므로, (1) 청소가 되어있는지, (2) 벽이 있는지 없는지

