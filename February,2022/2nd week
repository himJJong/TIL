[Greedy]

간단히 설명해, 그리디 알고리즘은 "매 선택에서 현재 당장 최적인 답"을 선택해 전체 적합한 결과를 도출하자는 알고리즘 기법이다. 즉, 백트래킹을 통해 추가 점검을 하지 않고 현재 조건에서 선택을 했다면
더 이상 다른 선택 가능 경우는 검증하지 않는다!
그런데 문제는, 그리디 알고리즘은 전체에서 최적값을 언제나 구할 수는 없다는 것이다. 
그럼에도 불구하고 그리디 알고리즘은 속도가 매우 빠르기 때문에 자주 사용될 수 있다. 하지만 항상 최적해가 되지 않으므로 특수한 조건이 만족되어야 사용할 수 있다.

아래와 같이 2가지 조건을 만족해야 한다.

1) 탐욕 선택 속성(Greedy Choice Property)
2) 최적 부분 구조(Optimal Substructure)

1)은 이전의 선택이 이후에 영향을 주지 않음을 의미하며, 2)는 부분 문제의 최적결과가 전체에도 그대로 적용될 수 있어야 한다는 것이다.
2)의 조건에서 우리는 Dynamic Programming(DP)을 떠올릴 수 있다. 실제로 DP에서도 이와 같은 조건이 필요하기 때문이다. 하지만 DP는 다른 조건이 다르다.

DP의 경우에는 문제가 Overlapping되기 때문에 다음에 풀 문제가 이전의 작은 문제의 결과에 영향을 받게 된다. 즉, 동일한 형식의 문제가 점점 커질 뿐, 이전의 경우에 영향을 받는다.
하지만 그리디 알고리즘은 이와 달리 영향을 받아서는 안된다. 그래야 다른 경우의 결과에 상관 없이 최적해를 구할 수 있기 때문이다.

 
그런데 위의 2가지 조건을 완전히 만족하는지, 그래서 해당 문제가 그리디 알고리즘을 사용할 수 있는 경우인지를 증명하는 것은 좀 어렵다.
일반적으로 그리디임을 증명하려면 [수학적 증명]이 동반되어야 한다. 하지만 이 방식은 좀 어려우므로 우선 테스트 코드를 작성하여 정상 동작하는지를 알아보는 방식으로 시도하는 경우가 많다.
그리디가 아니라고 보는 경우는 반례를 1개만 찾아도 되기 때문에 상대적으로 쉽다.

 

 
예시

<Action Selection 문제>


그리디 알고리즘의 가장 대표적인 예시인 활동 선택(Action Selection) 문제
활동 선택 문제는 N개의 활동이 있고 각 활동에는 시작 시간 및 종료 시간이 있을 때, 한 사람이 최대한 많이 할 수 있는 활동(Activity)의 수를 구하는 문제이다.
즉, 각각의 활동(Activity)에는 시간이 소요되므로 하나를 선택했다면 그 동안 해당 시간에 다른 Activity를 할 수 없다. 



<거스름돈 문제>
 

이번엔 돈을 낸 뒤, 거스름돈을 최소 개수의 동전 및 지폐의 조합으로 주는 경우, 그 개수를 구하는 문제에 대해서 알아보자.
예를 들어, 누군가 2,730원 어치의 물건을 사고 5,000원을 냈다고 가정하면 거스름돈은 총 2,270원이 될 것이다. 이 때, 지폐와 동전 종류가 아래와 같을 때, 최소의 개수로 거스름돈을 주는 경우는 어떤 경우일까?
지폐 및 동전의 종류 : 1,000원, 500원, 100원, 50원, 10원
정답 : 1,000원 2개 / 100원 2개 / 50원 1개 / 10원 2개로 총 7개

 
이를 풀어낸 원리는 기본적으로 MSD를 이용한 것이다.
MSD는 Most Significant Digit이란 의미로 가장 중요한 단위를 먼저 계산하는 것이다. 위의 경우에서 자신보다 더 큰 지폐 혹은 동전으로 거스름돈을 준다면 나머지는 무조건 
더 적은 개수로 반환하는 것이 가능하기 때문에 이를 사용할 수 있다.
따라서, 이전의 선택과 관련 없이 현재 상태에서 최선의 결과를 선택하여 전체에서 최적의 결과를 낼 수 있게 된다.

 
그런데, 이 문제가 언제나 적용 가능할까? 그렇지 않다.
예를 들어, 거스름돈이 120원을 줘야 하는 상태에서 거스름돈으로 줄 수 있는 동전의 종류가 다음과 같다고 하자.
동전의 종류 : 50원, 40원, 10원

 
이 때, MSD 방식을 그대로 적용하여 구하면 답은 어떻게 될까?
답 : 50원 2개, 10원 2개로 총 4개

그런데, 실제로 이 문제는 40원 3개를 거슬러 주면 더 적은 개수로 거스름돈을 줄 수 있게 된다.

이전과 다른 점은 무엇일까..? 40원은 자신보다 큰 동전(50원)의 약수가 아니다. 그래서 50원은 40원을 대체해 더 적은 숫자로 반환하는 경우라고 보장할 수 없게 된다.

 

이와 같이, 그리디 알고리즘으로 해결할 수 있으려면 조건을 충분히 만족하는지를 검증할 수 있어야 한다.

==================================================================================================================================================================

<완전 탐색> 

완전탐색은 가능한 경우의 수를 모두 조사해서 정답을 찾는 방법으로, 무식하게 가능한 것을 다 해보겠다는 의미로 Brute Force라고도 부른다.

해결하고자 하는 문제의 가능한 경우의 수를 대략적으로 계산
가능한 모든 방법을 다 고려, 실제 답을 구할 수 있는지 적용

<완전탐색의 종류>

1) Brute Force 기법
Brute Force 기법은 반복 / 조건문을 통해 가능한 모든 방법을 단순히 찾는 경우를 말한다. 
예를 들어, 4자리로 된 번호 자물쇠를 푼다고 할 때 최악의 경우 10000 * 1초 = 대략 166분 (컴퓨터의 연산 속도 : 대략 1초에 1억) 이 걸릴 수 있다.


2) 백트래킹 (Backtracking)
백트래킹 (Backtracking)은 현재 상태에서 가능한 후보군으로 가지를 치며 탐색하는 알고리즘이다. 
분할정복을 이용한 기법으로, 재귀함수를 이용하고 해를 찾아가는 도중 해가 될 것 같지 않은 경로가 있다면 더 이상 가지 않고 되돌아간다.


3) 순열 (Permutation)
순열은 임의의 수열이 주어졌을 때 그것을 다른 순서로 연산하는 방법이다. 서로 다른 N개를 일렬로 나열하는 순열의 경우의 수는 N!이므로 완전 탐색을 이용하기 위해서는 N이 한자리 수 정도는 되어야 한다.

from itertools import permutations

permutations(arr, n) 
# permutations 이용
# n개씩 순열 조합해서 모든 경우의 수 판정


4) 비트 마스크 (Bit Mask)
비트 마스크 (Bit Mask)는 2진수를 이용하는 컴퓨터의 연산을 이용하는 방식이다. 완전 탐색에서 비트마스크는 문제에서 나올 수 있는 모든 경우의 수가 각각의 원소가 포함되거나, 
포함되지 않는 두 가지 선택으로 구성되는 경우에 유용하게 사용 가능하다.예를 들어, 원소가 5개인 집합의 모든 부분집합을 구하는 경우를 생각해보면, 어떤 집합의 부분집합은 집합의 각 원소가 해당 부분집합에 포함되거나 
포함되지 않는 두 가지 경우만 존재한다. 따라서 5자리 이진수를 이용하여 각 원소의 포함 여부를 체크할 수 있다.


5) 재귀함수

재귀함수를 통해서 문제를 만족하는 경우들을 만들어가는 방식이다.
위에서 언급한 부분집합 문제를 예로 들면, 만들고자 하는 부분집합을 S'라고 할 때, S' = {} 부터 시작해서 각 원소에 대해서 해당 원소가 포함이 되면 S'에 넣고 
재귀함수를 돌려주고 포함이 되지 않으면 S'를 그대로 재귀함수에 넣어주는 방식이다. 비트마스크와 마찬가지로 주로 각 원소가 포함되거나, 포함되지 않는 두 가지 선택을 가질 때 사용된다.


6) DFS/BFS

DFS/BFS 알고리즘
약간 난이도가 있는 문제로 완전탐색 + DFS/BFS 문제가 많이 나온다. 예를 들어, 단순히 길을 찾는 문제라면 DFS/BFS만 이용해도 충분하지만, 
주어진 도로에 장애물을 설치하거나 목적지를 추가하는 등의 추가적인 작업이 필용한 경우에 이를 완전 탐색으로 해결하고 나서 DFS/BFS를 이용해야 한다.


참고자료 https://hongjw1938.tistory.com/172
https://velog.io/@yesjjin99/Algorithm-완전탐색
