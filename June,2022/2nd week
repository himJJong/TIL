1. config 패키지
Spring Security에 필요한 설정 파일이 존재한다
 

2. controller 패키지
Controller Class들이 모여 있으며, View로부터 오는 HTTP 요청 (API 요청)을 처리하는 역할을 한다.

3. domain 패키지
DB의 테이블과 매칭될 Class 파일들이 모여 있다. (Entity 클래스라고도 함

4. dto 패키지
dto(data transfer object)란 각 계층간 데이터 교환을 위한 객체이다.
DB로부터 데이터를 얻어 Service, Controller 등으로 보낼 때 사용한다.
별도의 Logic을 갖지 않고 순수 getter, setter 메서드만 가진다.

5. repository 패키지
Entity에 의해 생성된 DB에 접근하는 메서드(ex) findAll()) 들을 사용하기 위한 Interface 파일들이 모여있는 패키지이다.
보통 JpaRepository를 상속 받음으로써 기본적인 CURD 동작이 모두 가능해진다.
=> JpaRepository<대상으로 지정할 엔티티, 해당 엔티티의 PK의 타입>

6. service 패키지
DB와 상호작용하는 비즈니스 로직을 수행하는 Class 파일들이 모여져 있다.

대충 흐름을 설명하자면,
SpringBoot는 Java란 Programming Language로 API를 제공해준다.
사용자는 이런 API를 HTML 등의 Front View와 상호작용하며 데이터를 주고 받게 된다.
사용자는 Web Front를 통해 SpringBoot의 API를 사용하게 되며
모든 사용자의 요청은 Controller를 통해 분기 처리를 하게 된다. (DispatcherServlet이 앞 단에 있긴 하지만 생략)
Controller는 View로부터 받은 사용자의 요청을 Service에게 요청하며, Serivce는 내부 비즈니스 로직을 담당
Service는 DB(Entity)와 상호작용을 해서 데이터를 Create, Read, Update, Delete 등을 수행하게 된다.
또한 Front <-> Controller <-> Service 간 데이터를 주고 받을 때는 DTO(Data Transfer Object)라는 객체를 통해 데이터를 주고 받게 된다. (선택 사항이지만 권장하는 부분)
보통 Doamin 클래스와 DTO 클래스를 구분하는 이유는?

View Layer와 DB Layer의 역할을 철저히 구분하기 위해서
Table과 Mapping되는 Entity Class가 변경되면 여러 클래스에 영향을 끼치게 되지만 View와 통신하는 DTO Class는 자주 변경되므로 분리해야 한다.
즉 DTO는 Domain Model을 복사한 형태로, 다양한 Presentation Logic을 추가한 정도로 사용하며 Domain Model 객체는 Persistent만을 위해 사용한다.
참고 : https://nyyang.tistory.com/123?category=1029606
